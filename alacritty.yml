live_config_reload: true

dpi:
  x: 120.0
  y: 120.0

# Display tabs using this many cells (changes require restart)
draw_bold_text_with_bright_colors: false

window:
  startup_mode: Maximized

font:
  normal:
    style: Regular
  bold:
    style: Regular
  size: 13.0
  # OS X only: use thin stroke font rendering. Thin strokes are suitable
  # for retina displays, but for non-retina you probably want this set to
  # false.
  use_thin_strokes: false

bell:
  duration: 0

schemes:
  parsec: &parsec
    cursor:
      cursor: '0x8000FF'
      text: '0x000000'
    primary:
      background: '0x3B3B3B'
      foreground: '0xEBE4D3'
    normal:
      black: '0x494949'
      red: '0xF2777A'
      green: '0x99CC99'
      yellow: '0xFEDB78'
      blue: '0x99CCCC'
      magenta: '0xD567AF'
      cyan: '0xD2FDFE'
      white: '0xEEE8D5'
    bright:
      black: '0x3B3B3B'
      red: '0xF99157'
      green: '0x999999'
      yellow: '0xCCCCCC'
      blue: '0xEBE4D3'
      magenta: '0xCC99CC'
      cyan: '0x93A1A1'
      white: '0xFDF6E3'

  solarized_light: &solarized_light
    primary:
      background: '#fdf6e3'  # base3
      foreground: '#657b83'  # base00
    cursor:
      text: '#fdf6e3'  # base3
      cursor: '#657b83'  # base00
    normal:
      black: '#073642'  # base02
      red: '#dc322f'  # red
      green: '#859900'  # green
      yellow: '#b58900'  # yellow
      blue: '#268bd2'  # blue
      magenta: '#d33682'  # magenta
      cyan: '#2aa198'  # cyan
      white: '#eee8d5'  # base2
    bright:
      black: '#002b36'  # base03
      red: '#cb4b16'  # orange
      green: '#586e75'  # base01
      yellow: '#657b83'  # base00
      blue: '#839496'  # base0
      magenta: '#6c71c4'  # violet
      cyan: '#93a1a1'  # base1
      white: '#fdf6e3'  # base3

  solarized_dark: &solarized_dark
    primary:
      background: '#002b36'  # base03
      foreground: '#839496'  # base0
    cursor:
      text: '#002b36'  # base03
      cursor: '#839496'  # base0
    normal:
      black: '#073642'  # base02
      red: '#dc322f'  # red
      green: '#859900'  # green
      yellow: '#b58900'  # yellow
      blue: '#268bd2'  # blue
      magenta: '#d33682'  # magenta
      cyan: '#2aa198'  # cyan
      white: '#eee8d5'  # base2
    bright:
      black: '#002b36'  # base03
      red: '#cb4b16'  # orange
      green: '#586e75'  # base01
      yellow: '#657b83'  # base00
      blue: '#839496'  # base0
      magenta: '#6c71c4'  # violet
      cyan: '#93a1a1'  # base1
      white: '#fdf6e3'  # base3

colors: *solarized_light

# Key bindings
#
# Each binding is defined as an object with some properties. Most of the
# properties are optional. All of the alphabetical keys should have a letter for
# the `key` value such as `V`. Function keys are probably what you would expect
# as well (F1, F2, ..). The number keys above the main keyboard are encoded as
# `Key1`, `Key2`, etc. Keys on the number pad are encoded `Number1`, `Number2`,
# etc.  These all match the glutin::VirtualKeyCode variants.
#
# Possible values for `mods`
# `Command`, `Super` refer to the super/command/windows key
# `Control` for the control key
# `Shift` for the Shift key
# `Alt` and `Option` refer to alt/option
#
# mods may be combined with a `|`. For example, requiring control and shift
# looks like:
#
# mods: Control|Shift
#
# The parser is currently quite sensitive to whitespace and capitalization -
# capitalization must match exactly, and piped items must not have whitespace
# around them.
#
# Either an `action` or `chars` field must be present. `chars` writes the
# specified string every time that binding is activated. These should generally
# be escape sequences, but they can be configured to send arbitrary strings of
# bytes. Possible values of `action` include `Paste` and `PasteSelection`.
key_bindings:
  - { key: V,        mods: Command, action: Paste                        }
  - { key: C,        mods: Command, action: Copy                         }
  - { key: M,        mods: Command, action: None                         }
  - { key: H,        mods: Command, action: None                         }
  - { key: Equals, mods: Command,         action: None }
  - { key: Plus,   mods: Command,         action: None }
  - { key: Minus,  mods: Command,         action: None }
  - { key: Home,                    chars: "\x1b[H",   mode: ~AppCursor  }
  - { key: Home,                    chars: "\x1b[1~",  mode: AppCursor   }
  - { key: End,                     chars: "\x1b[F",   mode: ~AppCursor  }
  - { key: End,                     chars: "\x1b[4~",  mode: AppCursor   }
  - { key: PageUp,                  chars: "\x1b[5~"                     }
  - { key: PageDown,                chars: "\x1b[6~"                     }
  - { key: Left,     mods: Shift,   chars: "\x1b[1;2D"                   }
  - { key: Left,     mods: Control, chars: "\x1b[1;5D"                   }
  - { key: Left,     mods: Alt,     chars: "\x1b[1;3D"                   }
  - { key: Left,                    chars: "\x1b[D",   mode: ~AppCursor  }
  - { key: Left,                    chars: "\x1bOD",   mode: AppCursor   }
  - { key: Right,    mods: Shift,   chars: "\x1b[1;2C"                   }
  - { key: Right,    mods: Control, chars: "\x1b[1;5C"                   }
  - { key: Right,    mods: Alt,     chars: "\x1b[1;3C"                   }
  - { key: Right,                   chars: "\x1b[C",   mode: ~AppCursor  }
  - { key: Right,                   chars: "\x1bOC",   mode: AppCursor   }
  - { key: Up,       mods: Shift,   chars: "\x1b[1;2A"                   }
  - { key: Up,       mods: Control, chars: "\x1b[1;5A"                   }
  - { key: Up,       mods: Alt,     chars: "\x1b[1;3A"                   }
  - { key: Up,                      chars: "\x1b[A",   mode: ~AppCursor  }
  - { key: Up,                      chars: "\x1bOA",   mode: AppCursor   }
  - { key: Down,     mods: Shift,   chars: "\x1b[1;2B"                   }
  - { key: Down,     mods: Control, chars: "\x1b[1;5B"                   }
  - { key: Down,     mods: Alt,     chars: "\x1b[1;3B"                   }
  - { key: Down,                    chars: "\x1b[B",   mode: ~AppCursor  }
  - { key: Down,                    chars: "\x1bOB",   mode: AppCursor   }
  - { key: Tab,      mods: Shift,   chars: "\x1b[Z"                      }
  - { key: F1,                      chars: "\x1bOP"                      }
  - { key: F2,                      chars: "\x1bOQ"                      }
  - { key: F3,                      chars: "\x1bOR"                      }
  - { key: F4,                      chars: "\x1bOS"                      }
  - { key: F5,                      chars: "\x1b[15~"                    }
  - { key: F6,                      chars: "\x1b[17~"                    }
  - { key: F7,                      chars: "\x1b[18~"                    }
  - { key: F8,                      chars: "\x1b[19~"                    }
  - { key: F9,                      chars: "\x1b[20~"                    }
  - { key: F10,                     chars: "\x1b[21~"                    }
  - { key: F11,                     chars: "\x1b[23~"                    }
  - { key: F12,                     chars: "\x1b[24~"                    }
  - { key: Back,                    chars: "\x7f"                        }
  - { key: Delete,                  chars: "\x1b[3~",  mode: AppKeypad   }
  - { key: Delete,                  chars: "\x1b[P",   mode: ~AppKeypad  } # Disabled because with this ctrl-backspace changes panes in tmux, 07/08/19 re-enabled because ctrl-backspace changes panes in tmux without this
  - { key: Period,   mods: Alt,     chars: "\x1b."                     }
  - { key: Comma,   mods: Alt,     chars: "\x1b,"                     }
  - { key: G,   mods: Alt,     chars: "\x1bg"                     }
  - { key: L,   mods: Alt,     chars: "\x1bl"                     }
  - { key: Q,   mods: Alt,     chars: "\x1bq"                     }

# Mouse bindings
#
# Currently doesn't support modifiers. Both the `mouse` and `action` fields must
# be specified.
#
# Values for `mouse`:
# - Middle
# - Left
# - Right
# - Numeric identifier such as `5`
#
# Values for `action`:
# - Paste
# - PasteSelection
# - Copy (TODO)
mouse_bindings:
  - { mouse: Middle, action: PasteSelection }
